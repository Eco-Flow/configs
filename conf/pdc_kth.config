// Nextflow config for use with PDC at KTH

params {
    project                      = null // Naiss project allocation
    clusterOptions               = null
    clusterName                  = {
        def cluster = "unknown"
        try {
            cluster = ['/bin/bash', '-c', 'sacctmgr show cluster -n | grep -o "^\s*[^ ]*\s*"'].execute().text.trim()
        }
        catch (IOException _e) {
            System.err.println("WARNING: Could not run sacctmgr, defaulting to unknown")
        }
        cluster
    }.call()

    config_profile_description   = 'PDC profile.'
    config_profile_contact       = 'Pontus Freyhult (@pontus)'
    config_profile_url           = "https://www.pdc.kth.se/"

    max_memory                   = 1790.GB
    max_cpus                     = 256
    max_time                     = 7.d

    schema_ignore_params         = "genomes,input_paths,cluster-options,clusterOptions,project,clusterName,validationSchemaIgnoreParams"
    validationSchemaIgnoreParams = "genomes,input_paths,cluster-options,clusterOptions,project,clusterName,schema_ignore_params"
}

singularity {
    enabled    = true
    runOptions = {
        def run_opts = []
        if (params.clusterName == "dardel") {
            run_opts << '-B /cfs/klemming/'
        }
        run_opts.minus("").join(" ")
    }.call()
}

process {
    resourceLimits = [
        memory: 1790.GB,
        cpus: 256,
        time: 7.d,
    ]
    // Should we lock these to specific versions?
    beforeScript   = 'module load PDC apptainer'

    executor       = 'slurm'
    clusterOptions = {
        def clusterOptionsCreator = { mem, time, cpus ->
            def slurm_opts = [
                "-A ${params.project}",
                params.clusterOptions ?: '',
            ]

            if (params.clusterName == "dardel") {
                if (time <= 7.d && mem <= 111.GB && cpus <= 256) {
                    slurm_opts << '-p shared'
                }
                else if (time < 1.d) {
                    // Shortish
                    if (mem > 222.GB) {
                        slurm_opts << '-p memory,main'
                    }
                    else {
                        slurm_opts << '-p main'
                    }
                }
                else {
                    // Not shortish
                    if (mem > 222.GB) {
                        slurm_opts << '-p memory'
                    }
                    else {
                        slurm_opts << '-p long'
                    }
                }
                if (!mem || mem < 6.GB) {
                    // Impose minimum memory if request is below
                    slurm_opts << '--mem=6G'
                }
            }
            slurm_opts.minus("").join(" ")
        }
        clusterOptionsCreator(task.memory, task.time, task.cpus)
    }
}
